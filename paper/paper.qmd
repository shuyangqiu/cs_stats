---
title: "My title"
subtitle: "My subtitle if needed"
author: 
  - First author
  - Another author
thanks: "Code and data are available at: LINK."
date: today
date-format: long
abstract: "First sentence. Second sentence. Third sentence. Fourth sentence."
format: pdf
number-sections: true
bibliography: references.bib
---

```{r}
#| include: false
#| warning: false
#| message: false

library(here)
library(tidyverse)
library(modelsummary)
library(marginaleffects)

political_preferences <- readRDS(here("models/winrates.rds"))
```


# Introduction

Modelling and predicting results of competitive sports is a potentially lucrative endeavor and can help provide
insights for competitors, team managers, coaches, and others. Sports betting is a multi-billion dollar industry employing
hundreds of data analysts to create better models and increase market efficiency. On the other hand, sharp bettors are creating their
own models to beat the odds and make fortunes. Meanwhile, teams and coaches can use models to create better rosters and find
the optimal training for their players.

Sports and other physical activities such as horse racing have been the primary focus of bookmakers but esports betting is becoming more popular and 
esports markets are being offered by many major bookmakers such as Pinnacle and Bet365. Since esports are new compared to traditional sports, 
there is relatively little research and the models are of lower quality. 

This paper aims to help close the gap by modelling the effects of various individual statistics such as kill/death ratios on the overall team win rate
in the `CS (Counter-Strike)` series. 
We found

The data section (@sec-data) explains how the source of the data, how it was collected, how it was cleaned and analyzed, and visualizations of the data. 
The model section (@sec-model) explains the model used to fit the dataset.
The results section (@sec-results) explains the results of the analysis with visualizations.

# Data {#sec-data}
The data used in this paper was provided by HLTV.org, a website that provides `CS` news, information about tournaments, past matches, and player statistics.
Player statistics and match data were scraped from HLTV.org using Python and the `selenium` and `BeautifulSoup` libraries. The win/loss data used is from all matches played between October 16, 2023 and April 1, 2024 in `CS:2 (Counter-Strike: 2)` tournaments with prize pools of at least $250,000. The player data used are lifetime statistics and include matches played in both `CS:GO (Counter-Strike: Global Offensive)` and `CS:2`. The lifetime statistics also include data from matches not used in the win/loss data.

The raw data was then cleaned and 

# Model

The goal of our modelling strategy is twofold. Firstly,...

Here we briefly describe the Bayesian analysis model used to investigate... Background details and diagnostics are included in [Appendix -@sec-model-details].

## Model set-up

Define $y_i$ as the number of seconds that the plane remained aloft. Then $\beta_i$ is the wing width and $\gamma_i$ is the wing length, both measured in millimeters.  

\begin{align} 
y_i|\mu_i, \sigma &\sim \mbox{Normal}(\mu_i, \sigma) \\
\mu_i &= \alpha + \beta_i + \gamma_i\\
\alpha &\sim \mbox{Normal}(0, 2.5) \\
\beta &\sim \mbox{Normal}(0, 2.5) \\
\gamma &\sim \mbox{Normal}(0, 2.5) \\
\sigma &\sim \mbox{Exponential}(1)
\end{align}

We run the model in R [@citeR] using the `rstanarm` package of @rstanarm. We use the default priors from `rstanarm`.


### Model justification

We expect a positive relationship between the size of the wings and time spent aloft. In particular...

We can use maths by including latex between dollar signs, for instance $\theta$.


# Results

```{r}
#| label: tbl-model
#| tbl-cap: Whether a respondent is likely to vote for Biden based on their race and education
#| echo: false
#| warning: false

modelsummary(
  list("Tournament Win Rate" = winrates),
  statistic = "mad",
  )
```


```{r}
#| label: fig-vote-education
#| fig-cap: aaa
#| echo: false

  ggplot(data, aes(x = adr, y = win_percent)) +
  ylim(0, 1) +
  geom_jitter(width = 0.00, height = 0.00, alpha = 1) +
  labs(
    x = "Kill/Death ratio",
    y = "Estimated tournament win rate"
  ) +
  theme_classic() +
  scale_color_brewer(palette = "Set1") +
  theme(legend.position = "bottom")
```

# Discussion

## First discussion point {#sec-first-point}

If my paper were 10 pages, then should be be at least 2.5 pages. The discussion is a chance to show off what you know and what you learnt from all this. 

## Second discussion point

## Third discussion point

## Weaknesses and next steps

Weaknesses and next steps should also be included.

\newpage

\appendix

# Appendix {-}


# Additional data details

# Model details {#sec-model-details}

## Posterior predictive check

In @fig-ppcheckandposteriorvsprior-1 we implement a posterior predictive check. This shows...

In @fig-ppcheckandposteriorvsprior-2 we compare the posterior with the prior. This shows... 

```{r}
#| eval: true
#| echo: false
#| message: false
#| warning: false
#| label: fig-ppcheckandposteriorvsprior
#| layout-ncol: 2
#| fig-cap: "Examining how the model fits, and is affected by, the data"
#| fig-subcap: ["Posterior prediction check", "Comparing the posterior with the prior"]

pp_check(first_model) +
  theme_classic() +
  theme(legend.position = "bottom")

posterior_vs_prior(first_model) +
  theme_minimal() +
  scale_color_brewer(palette = "Set1") +
  theme(legend.position = "bottom") +
  coord_flip()
```

## Diagnostics

@fig-stanareyouokay-1 is a trace plot. It shows... This suggests...

@fig-stanareyouokay-2 is a Rhat plot. It shows... This suggests...

```{r}
#| echo: false
#| eval: true
#| message: false
#| warning: false
#| label: fig-stanareyouokay
#| fig-cap: "Checking the convergence of the MCMC algorithm"
#| fig-subcap: ["Trace plot", "Rhat plot"]
#| layout-ncol: 2

plot(first_model, "trace")

plot(first_model, "rhat")
```



\newpage


# References


